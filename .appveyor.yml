version: "{build}"
# fetch repository as a zip archive
shallow_clone: true

cache:
- C:\Users\appveyor\Tools\cache\vcpkg
- C:\Tools\vcpkg\installed

skip_branch_with_pr: true
skip_commits:
  files:
  - .codecov.yml
  - .editorconfig
  - .git*
  - .github/
  - .travis.yml
  - .yamllint.yml
  - docs/
  - LICENSE
  - '**/.clang-*'
  - '**/*.filters'
  - '**/*.md'
  - '**/CPPLINT.cfg'

##====--------------------------------------------------------------------====##
## Build Matrix Configuration
# Dimensions: 4 (image; platform; configuration; environment:matrix)
#
##====-----------------
# Options:         Values (supported for this script):
# ------------------------------------------------------------------------------
# image            Visual Studio 2017 (default), Visual Studio 2015
# platform         x64 (default), x86
# configuration    Debug, Release        - use the MSVC compiler
#                  LLVM_(Debug, Release) - use the LLVM/clang compiler
# BUILDSYSTEM      MSBuild - (default) requires CMake generator
#                  Ninja - requires CMake generator
#                  MSBuild_Solution - use Visual Studio project configurations
# TOOLSET          (default empty) - set to image default or by configuration
#                  MSBuild only.
#                  When installed: ClangCL, v142, llvm, v141, v140, v140_xp
# CONDITION        main_branch_only, other_branch
#                  Helper variable to implement multiple job conditions for the
#                  MSBuild_Solution configuration.
##====-----------------
## Create_Matrix
image:
- Visual Studio 2019

platform:
- x86

configuration:
- Debug

environment:
  matrix:
  - BUILDSYSTEM: &Build_Ninja Ninja
  global:
    # yamllint disable rule:line-length
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    VCVAR2015: 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat'
    VCVAR2017: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat'
    VCVAR2019: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
    # vcpkg
    TOOLCHAIN_FILE: 'C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake'
    # yamllint enable rule:line-length
## /Create_Matrix

## /Modify_Matrix

##====--------------------------------------------------------------------====##
init:
- ps: |
    New-Item -ItemType Directory -Force ~\tools | pushd
    git clone https://github.com/Farwaykorse/AppVeyorHelpers.git --quiet
    Import-Module -Name .\AppVeyorHelpers -MinimumVersion 0.14.1
    popd
- ps: Show-SystemInfo -LLVM -CMake -Curl -Ninja -Path
- ps: |
    if ('Ninja','MSBuild','MSBuild_Solution' -ccontains "$env:BUILDSYSTEM") {
      Write-Output ('Build configuration: ' + $env:BUILDSYSTEM)
    } else {
      Send-Message -Error 'Unexpected or missing value for variable BUILDSYSTEM'
    }
    if (-not ('x64','x86' -ccontains "$env:PLATFORM") ) {
      Send-Message -Error 'Unexpected or missing value for variable PLATFORM'
    }
    if (-not ('Debug','Release','LLVM_Debug','LLVM_Release' -ccontains `
      "$env:CONFIGURATION")
    ) {
      Send-Message -Error 'Unexpected or missing value for CONFIGURATION'
    }

##====--------------------------------------------------------------------====##
## Install tools and dependencies
install:
- ps: Update-Vcpkg
- vcpkg install ms-gsl:%PLATFORM%-windows
- vcpkg install gtest:%PLATFORM%-windows

##====--------------------------------------------------------------------====##
before_build:
- ps: |
    if (! $env:TOOLSET -and $env:CONFIGURATION -match "^LLVM_.*") {
      if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2017") {
        $env:TOOLSET = "llvm"
      } else {
        $env:TOOLSET = "ClangCL"
      }
      $env:CONFIGURATION = $env:CONFIGURATION -replace "^LLVM_",""
    }
- ps: |
    if ("$env:BUILDSYSTEM" -eq "Ninja") {
      $GeneratorFlags = '-k 10'
      $Architecture = $env:PLATFORM
      if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2015") {
        $env:VCVARSALL = "`"$env:VCVAR2015`" $Architecture"
      } elseif ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2017"){
        $env:VCVARSALL = "`"$env:VCVAR2017`" $Architecture"
      } else {
        $env:VCVARSALL = "`"$env:VCVAR2019`" $Architecture"
      }
      $CMakeGenFlags = "-G Ninja"
    } else {
      $GeneratorFlags = '/m /v:normal'
      if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2015") {
        $Generator = 'Visual Studio 14 2015'
      } elseif ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2017"){
        $Generator = 'Visual Studio 15 2017'
      } else {
        $Generator = 'Visual Studio 16 2019'
      }
      if ("$env:PLATFORM" -eq "x86") { $Architecture = "Win32"}
      else { $Architecture = "x64" }
      if ($env:TOOLSET) {
        $CMakeGenFlags = `
          "-G `"$Generator`" -A $Architecture -T $env:TOOLSET"
      } else {
        $CMakeGenFlags = "-G `"$Generator`" -A $Architecture"
      }
    }
    if ("$env:TOOLSET" -match "llvm|ClangCL") {
      $env:CC  = "clang-cl"
      $env:CXX = "clang-cl"
      $env:CFLAGS   = "$env:CFLAGS -Werror"
      $env:CXXFLAGS = "$env:CXXFLAGS -Werror"
      if ("$env:PLATFORM" -eq "x86") { # Cross-compile to x86
        $env:CFLAGS   = "$env:CFLAGS -m32";
        $env:CXXFLAGS = "$env:CXXFLAGS -m32";
      }
    } else {
      $env:CFLAGS   = "$env:CFLAGS /WX"
      $env:CXXFLAGS = "$env:CXXFLAGS /WX"
    }
    $env:CMakeGenFlags = "$CMakeGenFlags"            `
      +" -DCMAKE_BUILD_TYPE=$env:CONFIGURATION"      `
      +" -DCMAKE_TOOLCHAIN_FILE=$env:TOOLCHAIN_FILE" `
      +' -Wdev -Werror=dev --log-context --warn-uninitialized'
    $env:CMakeBuildFlags = "--config $env:CONFIGURATION -- $GeneratorFlags"
- cd %APPVEYOR_BUILD_FOLDER%
- mkdir build && cd build
- if %BUILDSYSTEM%==Ninja (call %VCVARSALL%)
- echo %CMakeGenFlags%
- cmake %CMakeGenFlags% ..

##====--------------------------------------------------------------------====##
build_script:
- echo %CMakeBuildFlags%
- cmake --build . %CMakeBuildFlags%

after_build:
- ps: |
    Get-ChildItem -Recurse -Include *.exe, *.dll | Select-Object Length, Name

##====--------------------------------------------------------------------====##
test_script:
- >-
  ctest -j %NUMBER_OF_PROCESSORS%
  --test-action test --no-compress-output
  --quiet
- ps: $null = Assert-ValidCodecovYML

##====--------------------------------------------------------------------====##
deploy: off

##====--------------------------------------------------------------------====##
on_finish:
- ps: |
    # Process test results
    if (Test-Path ".\Testing\TAG") {
      $tag_name = "$(Get-Content .\Testing\TAG -TotalCount 1)"
      Copy-Item .\Testing\$tag_name\Test.xml .\Test.xml
      $template = `
        "https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl"
      $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      $XSLInputElement.Load("$template")
      $XSLInputElement.Transform(
        (Resolve-Path .\Test.xml),
        (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml")
      )
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile(
        "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
        (Resolve-Path .\ctest-to-junit-results.xml)
      )
    }
